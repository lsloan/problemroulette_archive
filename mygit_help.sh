#!/bin/bash
echo ""
echo "-----------ONLINE DOCUMENTATION/TUTORIALS------------"
echo ""
echo "http://www.gitguys.com/topics/"
echo "http://www.gitguys.com/git-resources/"
echo "http://nvie.com/posts/a-successful-git-branching-model/"
echo ""
echo "-----------REMINDERS------------"
echo ""
echo "INDEX = CACHE = STAGING AREA - roses by another name"
echo "HEAD points to tip of current branch"
echo "master refers to the main branch or production branch"
echo "git reflog show HEAD@{now} -10 ... shows commits if you were detached from head and commit"
echo ""
echo "-----------PREPARE WORKSPACE------------"
echo ""
echo "> git clone https://jaredtritz@bitbucket.org/jaredtritz/ecoach_analysis.git"
echo ""
echo "> git fetch origin ... sync current branch"
echo "> git fetch remote_repo ... syncs remote branches"
echo ""
echo "> git pull ... shorthand for fetch and merge sequence"
echo ""
echo "> git add [file] ... add file to index"
echo ""
echo "> git remote set-url origin <ssh info> ...  change from http to ssh, ssh info example: git@bitbucket.org:jaredtritz/howto_paper.git"
echo ""
echo "-----------GET INFORMATION------------"
echo ""
echo "> git remote show origin ... list info about remote repo"
echo ""
echo "> git config --list ... list info about local repo"
echo ""
echo "> git ls-files"
echo ""
echo "> git status ... useful many times, including after generating a merge conflict"
echo ""
echo "> git log --pretty=oneline"
echo "> git log --diff-filter=D --summary ... show all deleted files"
echo "> git log --pretty=format: --name-status | cut -f2- | sort -u ... show all the files in repo"
echo "> git log --pretty=format: --name-only --diff-filter=A | sort - ... show all the files in repo"
echo "> git log --graph --all --decorate ... shows a graph of how branches were made and merged"
echo "> git log --stat ... similiar to whatchanged, lots of good history"
echo "> git log origin/master..HEAD ... show unpushed commits"
echo "> git log --name-only ..origin/master ... show log entries upstream"
echo ""
echo "> git whatchanged ... magic little history :)"
echo ""
echo "-----------DO WORK------------"
echo ""
echo "> git checkout testing ... move HEAD to branch testing"
echo "> git checkout --detach <commit> ... copy specific commit from current branch to working"
echo "> git checkout -b testing ... shorthand for branch and then checkout sequence"
echo "> git checkout -b [branch] [remote]/[branch] ... get a tracking branch & switch to it"
echo "> git checkout <commit > -- <file> ... checkout or commit specific file"
echo "> git checkout <version> -- <file> ... checkout or commit specific version of file"
echo "> git checkout path/to/file/file.ext ... revert a file you've already edited"
echo "> git checkout master -f ... checkout doesn't discard local changes without -f"
echo ""
echo "> git branch ... list all open branches"
echo "> git branch -r ... list remote branches"
echo "> git branch -a ... list all branches including remote"
echo "> git branch -v ... see the last commit on all branches"
echo "> git branch --merged ... see the branches current is merged with"
echo "> git branch --no-merged ... see the branches current is not merged with"
echo "> git branch testing ... create branch testing from current"
echo ""
echo "> git diff ... shows the uncommitted changes"
echo "> git diff branch branch ... show difference between branches"
echo "> git diff branch branch -- filename ... show difference between branches for filename"
echo "> git diff --raw ... messy file list with changes"
echo "> git diff --name-status ... neat file list with changes"
echo "> git diff --word-diff=color ... easy to see complete diff"
echo "> git diff is worktree (WT) compared to index (IDX), git diff --cached is IDX compared to HEAD, git diff COMMIT is WT compared to COMMIT, git diff --cached COMMIT is IDX compared to COMMIT etc."
echo "> git diff --name-only ..origin/master ... show files which will change upon merge"
echo ""
echo "-----------SAVE WORK------------"
echo ""
echo "> git merge branchname"
echo "> git merge origin/branch ... do this from a branch that is lagging the origin"
echo "> git merge --no-commit ... don't commit on merge"
echo "> git mergetool ... choose a tool to resolve conflicts"
echo ""
echo "> git rebase onto [branch1] [branch2] [branch3] ... rebase branch3 onto branch1 skipping fork at branch2"
echo ""
echo "> git cherry-pick <commit#> ... selectively merge in a random commit"
echo ""
echo "> git commit -m 'made a change' ... creates node and points HEAD to it"
echo "> git commit -a -m 'made a change'... creates node and points HEAD to it"
echo "> git commit --amend ... uses staging area for commit; add file to a commit, change commit message, etc."
echo ""
echo "> git reset filename ... remove file from staging area"
echo "> git reset --hard HEAD ... remove the last commit"
echo "> git reset --hard HEAD~1 ... remove the commit before HEAD"
echo "> git reset --hard <sha1-commit-id> ... remove commit with specific ID"
echo "> git rm --cached filename ... remove from staging but not from workspace"
echo ""
echo "> git push"
echo "> git push [remote] [branch] ... push branch to remote repo"
echo "> git push origin thebranch ... example of pushing branch to origin of remote repo"
echo "> git push origin [tagname] ... push a tag to remote"
echo "> git push [origin] :[branch] ... delete a remote branch"
echo ""
echo "> git tag -a v1.4 -m 'released to whomever' ... annotated tag"
echo "> git tag -a v1.4 ###checksum ... tag after the fact"
echo ""
echo "> git remote add [branch]... add a branch to remote repo"
